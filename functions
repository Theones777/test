# Функция изменения bounding_boxex при изменении размеров картинки.
def resize_bboxes(frame_mode, coords, orig_x, orig_y, target_x=416, target_y=416):
    real_boxes = []
    if frame_mode == 'stretch':
        for coord in coords.split(' '):
            sample = [literal_eval(x) for x in coord.split(',')]
            sample[0] = int(round((sample[0] / orig_x) * target_x, 0))
            sample[1] = int(round((sample[1] / orig_y) * target_y, 0))
            sample[2] = int(round((sample[2] / orig_x) * target_x, 0))
            sample[3] = int(round((sample[3] / orig_y) * target_y, 0))

            real_boxes.append(sample)

    elif frame_mode == 'fit':
        for coord in coords.split(' '):
            sample = [literal_eval(x) for x in coord.split(',')]
            if orig_x >= orig_y:
                new_y = int(orig_y / (orig_x / target_x))
                sample[0] = int(round((sample[0] / orig_x) * target_x, 0))
                sample[2] = int(round((sample[2] / orig_x) * target_x, 0))
                sample[1] = int(round((sample[1] / orig_y) * new_y, 0) + (target_y - new_y) / 2)
                sample[3] = int(round((sample[3] / orig_y) * new_y, 0) + (target_y - new_y) / 2)
                if new_y > target_y:
                    new_x = int(orig_x / (orig_y / target_y))
                    sample[0] = int(round((sample[0] / orig_x) * new_x, 0) + (target_x - new_x) / 2)
                    sample[2] = int(round((sample[2] / orig_x) * new_x, 0) + (target_x - new_x) / 2)
                    sample[1] = int(round((sample[1] / orig_y) * target_y, 0))
                    sample[3] = int(round((sample[3] / orig_y) * target_y, 0))

            elif orig_y >= orig_x:
                new_x = int(orig_x / (orig_y / target_y))
                sample[0] = int(round((sample[0] / orig_x) * new_x, 0) + (target_x - new_x) / 2)
                sample[2] = int(round((sample[2] / orig_x) * new_x, 0) + (target_x - new_x) / 2)
                sample[1] = int(round((sample[1] / orig_y) * target_y, 0))
                sample[3] = int(round((sample[3] / orig_y) * target_y, 0))
                if new_x > target_x:
                    new_y = int(orig_y / (orig_x / target_x))
                    sample[0] = int(round((sample[0] / orig_x) * target_x, 0))
                    sample[2] = int(round((sample[2] / orig_x) * target_x, 0))
                    sample[1] = int(round((sample[1] / orig_y) * new_y, 0) + (target_y - new_y) / 2)
                    sample[3] = int(round((sample[3] / orig_y) * new_y, 0) + (target_y - new_y) / 2)

            real_boxes.append(sample)

    elif frame_mode == 'cut':
        for coord in coords.split(' '):
            sample = [literal_eval(x) for x in coord.split(',')]
            if orig_x <= target_x:
                sample[0] = int(sample[0] + (target_x - orig_x) / 2)
                sample[2] = int(sample[2] + (target_x - orig_x) / 2)
            else:
                sample[0] = int(sample[0] - (orig_x - target_x) / 2)
                sample[2] = int(sample[2] - (orig_x - target_x) / 2)
            if orig_y <= target_y:
                sample[1] = int(sample[1] + (target_y - orig_y) / 2)
                sample[3] = int(sample[3] + (target_y - orig_y) / 2)
            else:
                sample[1] = int(sample[1] - (orig_y - target_y) / 2)
                sample[3] = int(sample[3] - (orig_y - target_y) / 2)

            real_boxes.append(sample)

    pop_idxs = []
    for idx, bbox in enumerate(real_boxes):
        for i in range(4):
            if i in [0, 2]:
                if bbox[i] > target_x:
                    bbox[i] = target_x
            elif i in [1, 3]:
                if bbox[i] > target_y:
                    bbox[i] = target_y
            if bbox[i] < 0:
                bbox[i] = 0

        if bbox[0] >= bbox[2] or bbox[1] >= bbox[3]:
            pop_idxs.append(idx)

    for i in reversed(pop_idxs):
        real_boxes.pop(i)

    return real_boxes

# Получение умен классов для обнаружения объектов
def get_od_names(creation_data):
    names_list = []
    for out in creation_data.outputs:
        if out.type == LayerOutputTypeChoice.ObjectDetection:
            if out.parameters.model_type in [LayerODDatasetTypeChoice.Yolov1, LayerODDatasetTypeChoice.Yolo_terra]:
                with open(creation_data.source_path.joinpath('obj.names'), 'r') as names:
                    names_list = names.read()
                names_list = [elem for elem in names_list.split('\n') if elem]

            elif out.parameters.model_type == LayerODDatasetTypeChoice.Coco:
                for js_file in os.listdir(out.parameters.sources_paths[0]):
                    json_data = json.load(open(os.path.join(out.parameters.sources_paths[0], js_file)))

                names_list = [0 for i in json_data["categories"]]
                for i in json_data["categories"]:
                    names_list[i['id']] = i['name']

            elif out.parameters.model_type == LayerODDatasetTypeChoice.Voc:
                (dir_path, dir_names, filenames) = next(os.walk(os.path.abspath(out.parameters.sources_paths[0])))
                for filename in filenames:
                    xml = open(os.path.join(dir_path, filename), "r", encoding='utf-8')
                    tree = Et.parse(xml)
                    root = tree.getroot()
                    objects = root.findall("object")
                    for _object in objects:
                        names_list.append(_object.find("name").text)
                    xml.close()
                names_list = sorted(set(names_list))

            elif out.parameters.model_type == LayerODDatasetTypeChoice.Kitti:
                (dir_path, dir_names, filenames) = next(os.walk(os.path.abspath(out.parameters.sources_paths[0])))
                for filename in filenames:
                    txt = open(os.path.join(dir_path, filename), "r")
                    for line in txt:
                        elements = line.split(" ")
                        names_list.append(elements[0])
                    txt.close()
                names_list = sorted(set(names_list))

            elif out.parameters.model_type == LayerODDatasetTypeChoice.Udacity:
                for i in os.listdir(creation_data.source_path):
                    if i.endswith('.csv'):
                        raw_f = open(os.path.join(creation_data.source_path, i), 'r', encoding='utf-8')
                csv_f = csv.reader(raw_f)
                raw_f.seek(0)

                for line in csv_f:
                    raw_line = line[0].split(" ")
                    raw_line_length = len(raw_line)
                    cls = raw_line[6].split('"')[1]
                    if raw_line_length == 8:
                        state = raw_line[7].split('"')[1]
                        cls = cls + state
                    names_list.append(cls)
                names_list = sorted(set(names_list))

    return names_list

# Автопоиск типа аннотации для обнаружения объектов
def get_annotation_type_autosearch(path: Path) -> LayerODDatasetTypeChoice:
    dir_names = []
    file_names = []

    for filename in os.listdir(path):
        if os.path.isdir(os.path.join(path, filename)):
            dir_names.append(filename)
        elif filename.endswith('.csv'):
            return LayerODDatasetTypeChoice.Udacity
        else:
            file_names.append(filename)

    if len(dir_names) == 1:
        return LayerODDatasetTypeChoice.Yolov1

    for dir_name in dir_names:
        if os.listdir(os.path.join(path, dir_name))[0].endswith('.json'):
            return LayerODDatasetTypeChoice.Coco
        elif os.listdir(os.path.join(path, dir_name))[0].endswith('.xml'):
            return LayerODDatasetTypeChoice.Voc
        elif os.listdir(os.path.join(path, dir_name))[0].endswith('.txt') and 'obj.names' not in file_names:
            return LayerODDatasetTypeChoice.Kitti
        elif os.listdir(os.path.join(path, dir_name))[0].endswith('.txt') and 'obj.names' in file_names:
            return LayerODDatasetTypeChoice.Yolo_terra
        else:
            annotation_type = 'Не определено'

    return annotation_type

# Автозаполнение таблицы один и тот же человек на кадрах или нет
def make_tracker_dataset(source_path, dst_path, bboxes, frame_mode):

    def make_crop(image_path, bbox):
        image = cv2.imread(image_path)
        coor = np.array(bbox[:4], dtype=np.int32)
        (x1, y1), (x2, y2) = (coor[0], coor[1]), (coor[2], coor[3])
        crop = image[y1:y2, x1:x2]
        return crop

    img_path = os.path.join(source_path, 'Images')
    tmp_directory = tempfile.mkdtemp()
    ims1 = []
    ims2 = []
    classes = []
    drop_idxs = []
    border = 30
    height = 0
    width = 0
    idx = 0
    while idx < len(bboxes) - 1:
        anns1 = bboxes[idx]
        anns2 = bboxes[idx + 1]
        os.makedirs(os.path.join(tmp_directory, f'frame_{idx}'), exist_ok=True)
        for j, ann in enumerate(anns1):
            crop = make_crop(os.path.join(img_path, sorted(os.listdir(img_path))[idx]), ann)
            cv2.imwrite(os.path.join(tmp_directory, f'frame_{idx}', f'crop_{j}.jpeg'), crop)
            if crop.shape[0] > height:
                height = crop.shape[0]
            if crop.shape[1] > width:
                width = crop.shape[1]

        for a1, a2 in product(anns1, anns2):
            if abs(a1[0] - a2[0]) <= border and abs(a1[1] - a2[1]) <= border and a1[4] == a2[4]:
                classes.append('Одинаковые')
            else:
                classes.append('Разные')
            ims1.append(os.path.join(f'frame_{idx}', f'crop_{anns1.index(a1)}.jpeg'))
            ims2.append(os.path.join(f'frame_{idx + 1}', f'crop_{anns2.index(a2)}.jpeg'))
        idx += 1

    for j, ann in enumerate(bboxes[-1]):
        crop = make_crop(os.path.join(img_path, sorted(os.listdir(img_path))[-1]), ann)
        cv2.imwrite(os.path.join(tmp_directory, f'frame_{len(bboxes)}', f'crop_{j}.jpeg'), crop)
        if crop.shape[0] > height:
            height = crop.shape[0]
        if crop.shape[1] > width:
            width = crop.shape[1]

    for directory in os.listdir(tmp_directory):
        for im_name in os.listdir(os.path.join(tmp_directory, directory)):
            img = cv2.imread(os.path.join(tmp_directory, directory, im_name), cv2.IMREAD_UNCHANGED)
            resized_im = resize_frame(img, (height, width), frame_mode)
            cv2.imwrite(os.path.join(tmp_directory, directory, im_name), resized_im)

    tracker_table = pd.DataFrame({'img_1': ims1,
                                  'img_2': ims2,
                                  'class': classes})

    crops_list = sorted(set(tracker_table['img_1'].tolist()))
    for crop in crops_list:
        tmp_df = tracker_table[tracker_table['img_1'] == crop]
        if len(tmp_df[tmp_df['class'] == 'Одинаковые']) > 1:
            drop_idxs.append(tmp_df[tmp_df['class'] == 'Одинаковые'].index.tolist())
    for idxs in drop_idxs:
        tracker_table.drop(index=idxs, inplace=True)
    tracker_table.index = range(0, len(tracker_table))

    tracker_table.to_csv(os.path.join(tmp_directory, 'tracker.csv'), index=False)
    zip_dataset(tmp_directory, os.path.join(dst_path, 'tracker'))
